# -*- coding: utf-8 -*-
"""Copy of Design and Analysis of Algorithm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BKurCBmvBXjR1FJnubJ06QOonfO-cRwj
"""

from networkx.utils.misc import make_str
from time import perf_counter_ns
import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from networkx.algorithms import tree


dataframe = pd.read_csv('https://raw.githubusercontent.com/SpectralPoison/Algo/main/input100_node.csv')                   #change node number here to read the specific data for nodes
dataframe_new = pd.read_csv('https://raw.githubusercontent.com/SpectralPoison/Algo/main/input100_edge.csv')               #change node number here to read the specific data for edges

graph = nx.Graph()
graph2 = nx.DiGraph()

data_node = np.zeros(shape=(len(dataframe.index), 3))
data_noden = np.zeros(shape=(len(dataframe_new.index), 3))

for i in range(len(dataframe.index)):
  for j in range(3):
    data_node[i][j] = dataframe.iat[i,j];

for i in range(len(dataframe_new.index)):
  for j in range(3):
    data_noden[i][j] = dataframe_new.iat[i,j];

axq=data_node.tolist()
ace = data_noden.tolist()

for i in range(len(axq)):
    graph.add_node(i, pos = (axq[i][1], axq[i][2]))
    graph2.add_node(i, pos = (axq[i][1], axq[i][2]))

for i in range(len(ace)):
    graph.add_edge(ace[i][0], ace[i][1], weight=(ace[i][2]/1000000))  
    graph2.add_edge(ace[i][0], ace[i][1], weight=(ace[i][2]/1000000))  

plt.rcParams['figure.figsize'] = [20, 20]

print("UnDirected")
weight = nx.get_edge_attributes(graph, 'weight')
pos = nx.get_node_attributes(graph, 'pos')
nx.draw_networkx_edge_labels(graph, pos, edge_labels=weight, horizontalalignment='center', bbox=dict(alpha=0), font_color='red', font_weight='heavy')
nx.draw(graph, pos, with_labels=1, font_color='yellow')
plt.show()

print("")
print("")

print("Directed")
weight = nx.get_edge_attributes(graph2, 'weight')
pos = nx.get_node_attributes(graph2, 'pos')
nx.draw_networkx_edge_labels(graph2, pos, edge_labels=weight, horizontalalignment='center', bbox=dict(alpha=0), font_color='red', font_weight='heavy')
nx.draw(graph2, pos, with_labels=1, font_color='yellow')
plt.show()

"""## Prim's Algorithm"""

print("MST using Prim's Algorithm")
mstp = nx.Graph()
t1_start = perf_counter_ns()
mst = tree.minimum_spanning_edges(graph, algorithm='prim', weight='weight', keys=True, data=True, ignore_nan=False)
t1_stop = perf_counter_ns()

mstp.add_edges_from(mst)
print("Elapsed time in ns:", t1_stop-t1_start)

weight = nx.get_edge_attributes(mstp, 'weight')
nx.draw_networkx_edge_labels(mstp, pos, edge_labels=weight, horizontalalignment='center', bbox=dict(alpha=0), font_color='red', font_weight='heavy')
nx.draw(mstp, pos, with_labels=1, font_color='yellow')
plt.show()

"""## Kruskal's Algorithm"""

print("MST using Kruskal's Algorithm")
mstk = nx.Graph()
t2_start = perf_counter_ns()
mstkp = tree.minimum_spanning_edges(graph, algorithm='kruskal', weight='weight', keys=True, data=True, ignore_nan=False)
t2_stop = perf_counter_ns()

mstk.add_edges_from(mstkp)
print("Elapsed time in ns:", t2_stop-t2_start)

weight = nx.get_edge_attributes(mstk, 'weight')
nx.draw_networkx_edge_labels(mstk, pos, edge_labels=weight, horizontalalignment='center', bbox=dict(alpha=0), font_color='red', font_weight='heavy')
nx.draw(mstk, pos, with_labels=1, font_color='yellow')
plt.show()

"""## Dijkstra's Algorithm"""

print("Shortest Weighted  Path Lengths")
t2_start = perf_counter_ns()
pathlength = nx.single_source_dijkstra_path_length(graph2, 1, cutoff=None, weight='weight')
t2_stop = perf_counter_ns()
print(pathlength)
print("Elapsed time in ns:", t2_stop-t2_start)

"""## Bellman–Ford Algorithm"""

print("Shortest Weighted  Path Lengths")
t2_start = perf_counter_ns()
pathlength = nx.single_source_bellman_ford_path_length(graph2, 1, weight='weight')
t2_stop = perf_counter_ns()
print(pathlength)
print("Elapsed time in ns:", t2_stop-t2_start)

"""## Floyd–Warshall Algorithm"""

print("Shortest Weighted  Path Lengths")
t2_start = perf_counter_ns()
pathlength = nx.floyd_warshall_numpy(graph2, nodelist=None, weight='weight')
t2_stop = perf_counter_ns()
print(pathlength)
print("Elapsed time in ns:", t2_stop-t2_start)

"""## Clustering Coefficient"""

print("Clustering Coefficient for Nodes")
t2_start = perf_counter_ns()
pathlength = nx.average_clustering(graph, nodes=None, weight=None)
t2_stop = perf_counter_ns()
print(pathlength)
print("Elapsed time in ns:", t2_stop-t2_start)

"""## Borůvka's Algorithm"""

print("MST using Borůvka’s Algorithm")
mstb = nx.Graph()
t1_start = perf_counter_ns()
mstbp = tree.minimum_spanning_edges(graph, algorithm='boruvka', weight='weight', keys=True, data=True, ignore_nan=False)
t1_stop = perf_counter_ns()

mstb.add_edges_from(mstbp)
print("Elapsed time in ns:", t1_stop-t1_start)

weight = nx.get_edge_attributes(mstb, 'weight')
nx.draw_networkx_edge_labels(mstb, pos, edge_labels=weight, horizontalalignment='center', bbox=dict(alpha=0), font_color='red', font_weight='heavy')
nx.draw(mstb, pos, with_labels=1, font_color='yellow')
plt.show()